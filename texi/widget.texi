\input texinfo.tex

@c $Id: widget.texi,v 1.1 1996/09/22 12:07:55 steve Exp $

@c %**start of header
@setfilename widget.info
@settitle The Emacs Widget Library
@iftex
@afourpaper
@headings double
@end iftex
@c %**end of header

@node Top, Introduction, (dir), (dir)
@comment  node-name,  next,  previous,  up
@top The Emacs Widget Library

Version: 0.9

@menu
* Introduction::                
* User Interface::              
* Programming Example::         
* Setting Up the Buffer::       
* Basic Types::                 
* Sexp Types::                  
* Widget Properties::           
* Defining New Widgets::        
* Widget Wishlist.::            
@end menu

@node  Introduction, User Interface, Top, Top
@comment  node-name,  next,  previous,  up
@section Introduction

Most graphical user interface toolkits, such as Motif and XView, provide
a number of standard user interface controls (sometimes known as
`widgets' or `gadgets').  Emacs doesn't really support anything like
this, except for an incredible powerful text ``widget''.  On the other
hand, Emacs does provide the necessary primitives to implement many
other widgets within a text buffer.  The @code{widget} package
simplifies this task.

The basic widgets are:

@table @code
@item link
Areas of text with an associated action.  Intended for hypertext links
embedded in text.
@item push 
Like link, but intended for stand-alone buttons.
@item field
An editable text field.  It can be either variable or fixed length.
@item choice
Allows the user to choose one of multiple options from a menu, each
option is itself a widget.  Only the selected option will be visible in
the buffer.
@item radio
Allows the user to choose one of multiple options by pushing radio
buttons.  The options are implemented as widgets.  All options will be
visible in the buffer.
@item item
A simple constant widget intended to be used in the @code{choice} and
@code{radio} widgets. 
@item choice-item
An button item only intended for use in choices.  When pushed, the user
will be asked to select another option from the choice widget.
@item toggle
A simple @samp{on}/@samp{off} switch.
@item checkbox
A checkbox (@samp{[ ]}/@samp{[X]}). 
@item repeat
Create an editable list.  The user can insert or delete items in the
list.  Each list item is itself a widget.
@end table

Now of what possible use can support for widgets be in a text editor?
I'm glad you asked.  The answer is that widgets are useful for
implementing forms.  A @dfn{form} in emacs is a buffer where the user is
supposed to fill out a number of fields, each of which has a specific
meaning.  The user is not supposed to change or delete any of the text
between the fields.  Examples of forms in Emacs are the @file{forms}
package (of course), the customize buffers, the mail and news compose
modes, and the @sc{html} form support in the @file{w3} browser.  

The advantages for a programmer of using the @code{widget} package to
implement forms are:

@enumerate
@item
More complex field than just editable text are supported. 
@item
You can give the user immediate feedback if he enters invalid data in a
text field, and sometimes prevent entering invalid data.
@item 
You can have fixed sized fields, thus allowing multiple field to be
lined up in columns.
@item
It is simple to query or set the value of a field. 
@item 
Editing happens in buffer, not in the mini-buffer.
@item 
Packages using the library get a uniform look, making them easier for
the user to learn.
@item 
As support for embedded graphics improve, the widget library will
extended to support it.  This means that your code using the widget
library will also use the new graphic features by automatic.
@end enumerate

In order to minimize the code that is loaded by users who does not
create any widgets, the code has been split in two files:

@table @file
@item widget.el
This will declare the user variables, define the function
@code{widget-define}, and autoload the function @code{widget-create}. 
@item widget-edit.el
Everything else is here, there is no reason to load it explicitly, as
it will be autoloaded when needed.
@end table

@node User Interface, Programming Example, Introduction, Top
@comment  node-name,  next,  previous,  up
@section User Interface

A form consist of read only text for documentation and some fields,
where each the fields contain two parts, as tag and a value.  The tags
are used to identify the fields, so the documentation can refer to the
foo field, meaning the field tagged with @samp{Foo}. Here is an example
form:

@example
Here is some documentation.

Name: @i{My Name}     @strong{Choose}: This option
Address:  @i{Some Place
In some City
Some country.}

See also @b{_other work_} for more information.

Numbers: count to three below
@b{[INS]} @b{[DEL]} @i{One}
@b{[INS]} @b{[DEL]} @i{Eh, two?}
@b{[INS]} @b{[DEL]} @i{Five!}
@b{[INS]} 

Select multiple:

@b{[X]} This
@b{[ ]} That
@b{[X]} Thus

Select one:

@b{(*)} One
@b{( )} Another One.
@b{( )} A Final One.

@b{[Apply Form]} @b{[Reset Form]}
@end example

The top level widgets in is example are tagged @samp{Name},
@samp{Choose}, @samp{Address}, @samp{_other work_}, @samp{Numbers},
@samp{Select multiple}, @samp{Select one}, @samp{[Apply Form]}, and
@samp{[Reset Form]}.  There are basically two thing the user can do within
a form, namely editing the editable text fields and activating the
buttons.

@subsection Editable Text Fields

In the example, the value for the @samp{Name} is most likely displayed
in an editable text field, and so are values for each of the members of
the @samp{Numbers} list.  All the normal Emacs editing operations are
available for editing these fields.  The only restriction is that each
change you make must be contained within a single editable text field.
For example, capitalizing all text from the middle of one field to the
middle of another field is prohibited.

Editing text fields are created by the @code{field} widget.

The editing text fields are highlighted with the
@code{widget-field-face} face, making them easy to find.

@defopt widget-field-face
Face used for other editing fields.
@end defopt

@subsection Buttons

Some portions of the buffer have an associated @dfn{action}, which can
be @dfn{activated} by a standard key or mouse command.  These portions
are called @dfn{buttons}.  The default commands for activating a button
are:

@table @kbd
@item @key{RET}
@deffn Command widget-button-press @var{pos} &optional @var{event}
Activate the button at @var{pos}, defaulting to point.
If point is not located on a button, activate the binding in
@code{widget-global-map} (by default the global map).
@end deffn

@item mouse-2
@deffn Command widget-button-click @var{event}
Activate the button at the location of the mouse pointer.  If the mouse
pointer is located in an editable text field, activate the binding in
@code{widget-global-map} (by default the global map).
@end deffn
@end table

There are several different kind of buttons, all of which are present in
the example:

@table @emph
@item The Option Field Tags.
When you activate one of these buttons, you will be asked to choose
between a number of different options.  This is how you edit an option
field.  Option fields are created by the @code{choice} widget.  In
the example, @samp{@b{Choose}} is an option field tag.
@item The @samp{@b{[INS]}} and @samp{@b{[DEL]}} buttons.
Activating these will insert or delete elements from a editable list.
The list is created by the @code{repeat} widget. 
@item Embedded Buttons.
The @samp{@b{_other work_}} is an example of an embedded
button. Embedded buttons are not associated with a fields, but can serve
any purpose, such as implementing hypertext references.  They are
usually created by the @code{link} widget.
@item The @samp{@b{[ ]}} and @samp{@b{[X]}} buttons.
Activating one of these will convert it to the other.  This is useful
for implementing multiple-choice fields.  You can create it wit
@item The @samp{@b{( )}} and @samp{@b{(*)}} buttons.
Only one radio button in a @code{radio} widget can be selected at any
time.  When you push one of the unselected radio buttons, it will be
selected and the previous selected radio button will become unselected. 
@item The @samp{@b{[Apply Form]}} @samp{@b{[Reset Form]}} buttons.
These are explicit buttons made with the @code{push} widget.  The main
difference from the @code{link} widget is that the buttons are intended
to be displayed more like buttons in a GUI, once Emacs grows powerful
enough. 
@end table

To make them easier to locate, buttons are emphasized in the buffer.  

@defopt widget-button-face
Face used for buttons.
@end defopt

@defopt widget-mouse-face
Face used for buttons when the mouse pointer is above it.
@end defopt

@subsection Navigation

You can use all the normal Emacs commands to move around in a form
buffer, plus you will have these additional commands:

@table @kbd
@item @key{TAB}
@deffn Command widget-forward &optional count
Move point @var{count} buttons or editing fields forward.
@end deffn
@item @key{M-TAB}
@deffn Command widget-backward &optional count
Move point @var{count} buttons or editing fields backward.
@end deffn
@end table

@node Programming Example, Setting Up the Buffer, User Interface, Top
@comment  node-name,  next,  previous,  up
@section Programming Example

Here is the code to implement the user interface example (see @ref{User
Interface}).

@lisp
(require 'widget)

(defvar widget-example-repeat)

(defun widget-example ()
  "Create the widgets from the Widget manual."
  (interactive)
  (switch-to-buffer "*Widget Example*")
  (kill-all-local-variables)
  (make-local-variable 'widget-example-repeat)
  (let ((inhibit-read-only t))
    (erase-buffer))
  (widget-insert "Here is some documentation.\n\nName: ")
  (widget-create 'field
		 :size 13
		 "My Name")
  (widget-create 'choice
		 :tag "Choose"
		 :value "This"
		 :help-echo "Choose me, please!"
		 :notify (lambda (widget &rest ignore)
			   (message "%s is a good choice!"
				    (widget-value widget)))
		 '(item :tag "This option" :value "This")
		 '(choice-item "That option")
		 '(field :menu-tag "No option" "Thus option"))
  (widget-insert "Address: ")
  (widget-create 'field
		 "Some Place\nIn some City\nSome country.")
  (widget-insert "\nSee also ")
  (widget-create 'link
		 :notify (lambda (&rest ignore)
			   (widget-value-set widget-example-repeat 
					     '("En" "To" "Tre"))
			   (widget-setup))
		 "other work")
  (widget-insert " for more information.\n\nNumbers: count to three below\n")
  (setq widget-example-repeat
	(widget-create 'repeat
		       :entry-format "%i %d %v"
		       :notify (lambda (widget &rest ignore)
				 (let ((old (widget-get widget
							':example-length))
				       (new (length (widget-value widget))))
				   (unless (eq old new)
				     (widget-put widget ':example-length new)
				     (message "You can count to %d." new))))
		       :value '("One" "Eh, two?" "Five!")
		       '(field :value "three")))
  (widget-insert "\n\nSelect multiple:\n\n")
  (widget-create 'checkbox t)
  (widget-insert " This\n")
  (widget-create 'checkbox nil)
  (widget-insert " That\n")
  (widget-create 'checkbox
		 :notify (lambda (&rest ignore) (message "Tickle"))
		 t)
  (widget-insert " Thus\n\nSelect one:\n\n")
  (widget-create 'radio
		 :value "One"
		 :notify (lambda (widget &rest ignore)
			   (message "You selected %s" (widget-value widget)))
		 '(item "One") '(item "Anthor One.") '(item "A Final One."))
  (widget-insert "\n")
  (widget-create 'push
		 :notify (lambda (&rest ignore) 
			   (if (= (length (widget-value widget-example-repeat))
				  3)
			       (message "Congratulation!")
			     (error "Three was the count!")))
		 "Apply Form")
  (widget-insert " ")
  (widget-create 'push
		 :notify (lambda (&rest ignore)
			   (widget-example))
		 "Reset Form")
  (widget-insert "\n")
  (use-local-map widget-keymap)
  (widget-setup))
@end lisp

@node Setting Up the Buffer, Basic Types, Programming Example, Top
@comment  node-name,  next,  previous,  up
@section Setting Up the Buffer

Widgets are created with @code{widget-create}, which returns a
@dfn{widget} object.  This object can be queried and manipulated by
other widget functions, until it is deleted with @code{widget-delete}.
After the widgets have been created, @code{widget-setup} must be called
to enable them.

@defun widget-create type [ keyword argument ]@dots{}
Create and return a widget of type @var{type}.
The syntax for the @var{type} argument is described in @ref{Basic Types}.

The keyword arguments can be used to overwrite the keyword arguments
that are part of @var{type}.
@end defun

@defun widget-delete widget
Delete @var{widget} and remove it from the buffer.
@end defun

@defun widget-setup 
Setup a buffer to support widgets. 

This should be called after creating all the widgets and before allowing
the user to edit them.
@refill
@end defun

If you want to insert text outside the widgets in the form, the
recommended way to do that is with @code{widget-insert}.

@defun widget-insert 
Insert the arguments, either strings or characters, at point.
The inserted text will be read only.
@end defun

There is a standard widget keymap which you might find useful.

@defvr Const widget-keymap
A keymap with the global keymap as its parent.@br
@key{TAB} and @kbd{C-@key{TAB}} are bound to @code{widget-forward} and
@code{widget-backward}, respectively.  @kbd{@key{RET}} and @kbd{mouse-2}
are bound to @code{widget-button-press} and
@code{widget-button-}.@refill
@end defvr

@defvar widget-global-map
Keymap used by @code{widget-button-press} and @code{widget-button-click}
when not on a button.  By default this is @code{global-map}.
@end defvar

@node Basic Types, Sexp Types, Setting Up the Buffer, Top
@comment  node-name,  next,  previous,  up
@section Basic Types

The syntax of a type specification is given below:

@example
NAME ::= (NAME [KEYWORD ARGUMENT]... ARGS)
     |   NAME
@end example

Where, @var{name} is a widget name, @var{keyword} is the name of a
property, @var{argument} is the value of the property, and @var{args}
are interpreted in a widget specific way.

There following keyword arguments that apply to all widgets:

@table @code
@item :value
The initial value for widgets of this type.

@item :format
This string will be inserted in the buffer when you create a widget.
The following @samp{%} escapes are available:

@table @samp
@item %[
@itemx %]
The text inside will be marked as a button.

@item %v
This will be replaces with the buffer representation of the widgets
value.  What this is depends on the widget type.

@item %d
Insert the string specified by @code{:doc} here.

@item %t
Insert the string specified by @code{:tag} here, or the @code{princ}
representation of the value if there is no tag.

@item %%
Insert a literal @samp{%}. 
@end table

@item :button-face
Face used to highlight text inside %[ %] in the format.

@item :doc
The string inserted by the @samp{%d} escape in the format
string.  

@item :tag
The string inserted by the @samp{%t} escape in the format
string.  

@item :help-echo
Message displayed whenever you move to the widget with either
@code{widget-forward} or @code{widget-backward}.

@item :notify
A function called each time the widget or a nested widget is changed.
The function is called with two or three arguments.  The first argument
is the widget itself, the second argument is the widget that was
changed, and the third argument is the event leading to the change, if
any. 

@item :menu-tag
Tag used in the menu when the widget is used as an option in a
@code{choice} widget.

@item :menu-tag-get
Function used for finding the tag when the widget is used as an option
in a @code{choice} widget.  By default, the tag used will be either the
@code{:menu-tag} or @code{:tag} property if present, or the @code{princ}
representation of the @code{:value} property if not.

@item :match
Should be a function called with two arguments, the widget and a value,
and returning non-nil if the widget can represent the specified value.

@item :validate
A function which takes a widget as an argument, and return nil if the
widgets current value is valid for the widget.  Otherwise, it should
return the widget containing the invalid data, and set that widgets
@code{:error} property to a string explaining the error.

@item :parent
The parent of a nested widget (e.g. a @code{choice} item or an element of a
@code{repeat} widget). 
@end table

@menu
* link::                        
* push::                        
* field::                       
* text::                        
* choice::                      
* radio::                       
* item::                        
* choice-item::                 
* toggle::                      
* checkbox::                    
* checklist::                   
* repeat::                      
@end menu

@node link, push, Basic Types, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{link} Widget

Syntax:

@example
TYPE ::= (link [KEYWORD ARGUMENT]...  [ VALUE ])
@end example

The @var{value}, if present, is used to initialize the @code{:value}
property.  The value should be a string, which will be inserted in the
buffer. 

@node  push, field, link, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{push} Widget

Syntax:

@example
TYPE ::= (push [KEYWORD ARGUMENT]...  [ VALUE ])
@end example

The @var{value}, if present, is used to initialize the @code{:value}
property. The value should be a string, which will be inserted in the
buffer. 

@node field, text, push, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{field} Widget

Syntax:

@example
TYPE ::= (field [KEYWORD ARGUMENT]... [ VALUE ])
@end example

The @var{value}, if present, is used to initialize the @code{:value}
property.  The value should be a string, which will be inserted in
field.  This widget will match all string values.

The following extra properties are recognized.

@table @code
@item :size
The width of the editable field.@br
By default the field will reach to the end of the line.

@item :value-face
Face used for highlighting the editable field.  Default is
@code{widget-field-face}. 

@item :keymap
Keymap used in the editable field.  @code{widget-keymap} will allow you
to use normal editing commands, even if these has been supressed in the
current buffer.

@end table

@node text, choice, field, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{text} Widget

This is just like @code{field}, but intended for multiline text
fields. 

@node choice, radio, text, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{choice} Widget

Syntax:

@example
TYPE ::= (choice [KEYWORD ARGUMENT]... TYPE ... )
@end example

The @var{type} arguments represents each possible choice.  The widgets
value of will be the value of the chosen @var{type} argument.  This
widget will match any value that matches at least one of the specified
@var{type} arguments.

@table @code
@item :void 
Widget type used as a fallback when the value does not match any of the
specified @var{type} arguments.

@item :children
A list whose car is the widget representing the currently chosen type in
the buffer. 

@item :choice
The current chosen type

@item :args 
The list of types. 
@end table

@node radio, item, choice, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{radio} Widget

Syntax:

@example
TYPE ::= (radio [KEYWORD ARGUMENT]...  TYPE ... )
@end example

The @var{type} arguments represents each possible choice.  The widgets
value of will be the value of the chosen @var{type} argument.  This
widget will match any value that matches at least one of the specified
@var{type} arguments.

The following extra properties are recognized.

@table @code
@item :entry-format
This string will be inserted for each entry in the list.
The following @samp{%} escapes are available:
@table @samp
@item %v
Replaced with the buffer representation of the @var{type} widget.
@item %b
Replace with the radio button.
@item %%
Insert a literal @samp{%}. 
@end table

@item :buttons
The widgets representing the radio buttons.

@item :children
The widgets representing each type.

@item :choice
The current chosen type

@item :args 
The list of types. 
@end table

You can add extra radio button items to a radio widget after it has been
created with the function `widget-radio-add-item'.

@defun widget-radio-add-item widget type
Add to radio widget @var{widget} a new radio button item of type @var{type}.
@end defun

Please note that such items added after the radio widget has been
created will @strong{not} be properly destructed when you call
@code{widget-delete}. 

@node item, choice-item, radio, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{item} Widget

Syntax:

@example
ITEM ::= (item [KEYWORD ARGUMENT]... VALUE)
@end example

The @var{value}, if present, is used to initialize the @code{:value}
property.  The value should be a string, which will be inserted in the
buffer.  This widget will only match the specified value.

@node choice-item, toggle, item, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{choice-item} Widget

Syntax:

@example
ITEM ::= (choice-item [KEYWORD ARGUMENT]... VALUE)
@end example

The @var{value}, if present, is used to initialize the @code{:value}
property.  The value should be a string, which will be inserted in the
buffer as a button.  Activating the button of a @code{choice-item} is
equivalent to activating the parent widget.  This widget will only match
the specified value. 

@node toggle, checkbox, choice-item, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{toggle} Widget

Syntax:

@example
TYPE ::= (toggle [KEYWORD ARGUMENT]...)
@end example

The widget has two possible states, `on' and `off', which corresponds to
a @code{t} or @code{nil} value.

The following extra properties are recognized.

@table @code
@item :on
String representing the `on' state.  By default the string @samp{on}.
@item :off 
String representing the `off' state.  By default the string @samp{off}.
@item :on-type
Type representing the `on' state.  By default an `item' widget displaying
the string specified with the @code{:on} keyword.
@item :off-type
Type representing the `off' state.  By default an `item' widget
displaying the string specified with the @code{:off} keyword.
@end table

@node checkbox, checklist, toggle, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{checkbox} Widget

The widget has two possible states, `selected' and `unselected', which
corresponds to a @code{t} or @code{nil} value.

Syntax:

@example
TYPE ::= (checkbox [KEYWORD ARGUMENT]...)
@end example

@node checklist, repeat, checkbox, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{checklist} Widget

Syntax:

@example
TYPE ::= (checklist [KEYWORD ARGUMENT]...  TYPE ... )
@end example

The @var{type} arguments represents each checklist item.  The widgets
value of will be a list containing the value of each ticked @var{type}
argument.  The checklist widget will match a list whose elements all
matches at least one of the specified @var{type} arguments.

The following extra properties are recognized.

@table @code
@item :entry-format
This string will be inserted for each entry in the list.
The following @samp{%} escapes are available:
@table @samp
@item %v
Replaced with the buffer representation of the @var{type} widget.
@item %b
Replace with the checkbox.
@item %%
Insert a literal @samp{%}. 
@end table

@item :buttons
The widgets representing the checkboxes.

@item :children
The widgets representing each type.

@item :args 
The list of types. 
@end table

@node repeat,  , checklist, Basic Types
@comment  node-name,  next,  previous,  up
@subsection The @code{repeat} Widget

Syntax:

@example
TYPE ::= ([KEYWORD ARGUMENT]... TYPE)
@end example

The value is a list, where each member represent one widget of type
@var{type}. 

The following extra properties are recognized.

@table @code
@item :indent
Number of spaces inserted before each member of the list, except for the
first. 

@item :entry-format
This string will be inserted for each entry in the list.
The following @samp{%} escapes are available:
@table @samp
@item %v
This will be replaced with the buffer representation of the @var{type}
widget.
@item %i
Insert the @b{[INS]} button.
@item %d
Insert the @b{[DEL]} button.
@item %%
Insert a literal @samp{%}. 
@end table

@item :buttons
The widgets representing the insert and delete buttons.

@item :children
The widgets representing the elements of the list.

@item :args
List whose car is the type of the list elements.

@end table

@node Sexp Types, Widget Properties, Basic Types, Top
@comment
@section Sexp Types

A number of widgets for editing s-expressions (lisp types) are also
available.  These basically fall in three categories: @dfn{atoms},
@dfn{composite types}, and @dfn{generic}.

@menu
* generic::                     
* atoms::                       
* composite::                   
@end menu

@node generic, atoms, Sexp Types, Sexp Types
@comment  node-name,  next,  previous,  up
@subsection The Generic Widget.

The @code{const} and @code{sexp} widgets can contain any lisp
expression.  In the case of the @code{const} widget the user is
prohibited from editing edit it, which is mainly useful as a component
of one of the composite widgets.

The syntax for the generic widgets is

@example
TYPE ::= (const [KEYWORD ARGUMENT]...  [ VALUE ])
@end example

The @var{value}, if present, is used to initialize the @code{:value}
property and can be any s-expression.

@deffn Widget const
This will display any valid s-expression in an immutable part of the
buffer. 
@end deffn

@deffn Widget sexp
This will allow you to edit any valid s-expression in an editable buffer
field. 

The @code{sexp} widget takes the same keyword arguments as the
@code{field} widget.
@end deffn

@node atoms, composite, generic, Sexp Types
@comment  node-name,  next,  previous,  up
@subsection Atomic Sexp Widgets.

The atoms are s-expressions that does not consist of other
s-expressions.  A string is an atom, while a list is a composite type.
You can edit the value of an atom with the following widgets.  

The syntax for all the atoms are

@example
TYPE ::= (NAME [KEYWORD ARGUMENT]...  [ VALUE ])
@end example

The @var{value}, if present, is used to initialize the @code{:value}
property and must be an expression of the same type as the widget.
I.e. the string widget can only be initialized with a string.

All the atom widgets take the same keyword arguments as the @code{field}
widget.

@deffn Widget string
Allows you to edit a string in an editable field.
@end deffn

@deffn Widget file
Allows you to edit a file name in an editable field.  You you activate
the tag button, you can edit the file name in the mini-buffer with
completion. 

Keywords:
@table @code
@item :must-match
If this is set to non-nil, only existing file names will be allowed in
the minibuffer.
@end table
@end deffn

@deffn Widget directory
Allows you to edit a directory name in an editable field.
Similar to the @code{file} widget.
@end deffn

@deffn Widget symbol
Allows you to edit a lisp symbol in an editable field.
@end deffn

@deffn Widget integer
Allows you to edit an integer in an editable field.
@end deffn

@deffn Widget number
Allows you to edit a number in an editable field.
@end deffn

@node composite,  , atoms, Sexp Types
@comment  node-name,  next,  previous,  up
@subsection Composite Sexp Widgets.

The syntax for the composite are

@example
TYPE ::= (NAME [KEYWORD ARGUMENT]...  COMPONENT...)
@end example

Where each @var{component} must be a widget type.  Each component widget
will be displayed in the buffer, and be editable to the user.

@deffn Widget cons
The value of a @code{cons} widget is a cons-cell where the car is the
value of the first component and the cdr is the value of the second
coponent.  There must be exactly two components. 
@end deffn

@deffn Widget lisp
The value of a @code{cons} widget is a list containing the value of
each of its component.
@end deffn

@deffn Widget vector
The value of a @code{cons} widget is a vector containing the value of
each of its component.
@end deffn

The above suffice for specifying fixed size lists and vectors.  To get
variable length lists and vectors, you can use a @code{choice},
@code{radio}, @code{checklist} or @code{repeat} widget together with the
@code{:inline} keyword.  If any component of a composite widget has the
@code{:inline} keyword set, its value must be a list which will then be
spliced into the composite.  For example, to specify a list whose first
element must be a file name, and whose remaining arguments should either
by the symbol @code{t} or two files, you can use the following widget
specification: 

@example
(list file
      (choice (const t)
              (list :inline t
                    :value ("foo" "bar")
                    string string)))
@end example

The value of a widget of this type will either have the form 
@samp{(file t)} or @code{(file string string)}.

This concept of inline is probably hard to understand.  It was certainly
hard to implement so instead of confuse you more by trying to explain it
here, I'll just suggest you meditate over it for a while.

@node Widget Properties, Defining New Widgets, Sexp Types, Top
@comment  node-name,  next,  previous,  up
@section Properties

You can examine or set this value by using the widget object that was
returned by @code{widget-create}.  

@defun widget-value widget
Return the current value contained in @var{widget}.
It is an error to call this function on an uninitialized widget.
@end defun

@defun widget-value-set widget value
Set the value contained in @var{widget} to @var{value}.
It is an error to call this function with an invalid @var{value}.
@end defun

@strong{Important:} You @emph{must} call @code{widget-setup} after
modifying the value of a widget before the user is allowed to edit the
widget again.  It is enough to call @code{widget-setup} once if you
modify multiple widgets.  This is currently only necessary if the widget
contains an editing field, but may be necessary for other widgets in the
future. 

If your application needs to associate some information with the widget
objects, for example a reference to the item being edited, it can be
done with @code{widget-put} and @code{widget-get}.  The property names
must begin with a @samp{:}.

@defun widget-put widget property value
In @var{widget} set @var{property} to @var{value}.
@var{property} should be a symbol, while @var{value} can be anything.
@end defun

@defun widget-get widget property
In @var{widget} return the value for @var{property}.
@var{property} should be a symbol, the value is what was last set by
@code{widget-put} for @var{property}.
@end defun

@defun widget-member widget property
Non-nil if @var{widget} has a value (even nil) for property @var{property}.
@end defun

@node Defining New Widgets, Widget Wishlist., Widget Properties, Top
@comment  node-name,  next,  previous,  up
@section Defining New Widgets

You can define specialized widgets with @code{define-widget}.  It allows
you to create a shorthand for more complex widgets, including specifying
component widgets and default new default values for the keyword
arguments. 

@defun widget-define name class doc &rest args
Define a new widget type named @var{name} from @code{class}.

@var{name} and class should both be symbols, @code{class} should be one
of the existing widget types. 

The third argument @var{DOC} is a documentation string for the widget.

After the new widget has been defined, the following two calls will
create identical widgets:

@itemize @bullet
@item
@lisp
(widget-create @var{name})
@end lisp

@item
@lisp
(apply widget-create @var{class} @var{args})
@end lisp
@end itemize

@end defun

Using @code{widget-define} does just store the definition of the widget
type in the @code{widget-type} property of @var{name}, which is what
@code{widget-create} uses.

If you just want to specify defaults for keywords with no complex
conversions, you can use @code{identity} as your conversion function.

The following additional keyword arguments are useful when defining new
widgets: 
@table @code
@item :convert-widget
Function to convert a widget type before creating a widget of that
type.  It takes a widget type as an argument, and returns the converted
widget type.  When a widget is created, this function is called for the
widget type and all the widgets parent types, most derived first. 

@item :value-to-internal
Function to convert the value to the internal format.  The function
takes two arguments, a widget and an external value, and returns the
internal value.  The function is called on the present @code{:value}
when the widget is created, and on any value set later with
@code{widget-value-set}.

@item :value-to-external
Function to convert the value to the external format.  The function
takes two arguments, a widget and an internal value, and returns the
internal value.  The function is called on the present @code{:value}
when the widget is created, and on any value set later with
@code{widget-value-set}.

@item :create
Function to create a widget from scratch.  The function takes one
argument, a widget type, and create a widget of that type, insert it in
the buffer, and return a widget object.

@item :delete
Function to delete a widget.  The function takes one argument, a widget,
and should remove all traces of the widget from the buffer.

@item :value-create
Function to expand the @samp{%v} escape in the format string.  It will
be called with the widget as its argument.  Should
insert a representation of the widgets value in the buffer.

@item :value-delete
Should remove the representation of the widgets value from the buffer.
It will be called with the widget as its argument.  It doesn't have to
remove the text, but it should release markers and delete nested widgets
if such has been used.

@item :format-handler
Function to handle unknown @samp{%} escapes in the format string.  It
will be called with the widget and the escape character as arguments.
You can set this to allow your widget to handle non-standard escapes.
@end table

If you want to define a new widget from scratch, use the @code{default}
widget as its base.

@deffn Widget default [ keyword argument ]
Widget used as a base for other widgets. 

It provides most of the functionality that is refered to as ``by
default'' in this text. 
@end deffn

@node  Widget Wishlist.,  , Defining New Widgets, Top
@comment  node-name,  next,  previous,  up
@section Wishlist.

@itemize @bullet
@item 
In general, we need @strong{much} better support for keyboard
operations. 

@itemize -
@item 
It should be possible to add or remove items from a list with @kbd{C-k}
and @kbd{C-o} (suggested by @sc{rms}).

@item
@kbd{C-k} should kill to end of field or end of line, whatever come
first. 

@item
Commands to move to the beginning/end of a field.

@end itemize

@item 
The @samp{[INS]} and @samp{[DEL]} buttons should be replaced by a single
dash (@samp{-}).  The dash should be a button that, when activated, ask
whether you want to add or delete an item (@sc{rms} wanted to git rid of
the ugly buttons, the dash is my idea).

@item
Use graphical versions of the widgets for emacsen that can do that.
I.e. real radio buttons and checkmarks instead of their @sc{ascii}
equivalents. 

@item
There should be a way to probe a widget to see if the user has modified
it. 

@item 
The support for indentation of component widgets should be finished. 

@item
There should be support for browsing the widget documentation.

@item
There should be a way to specify that @key{RET} in a field will call the
@code{:activate} function.  This should be used by widgets such as
@code{file} and @code{symbol} prompt with completion.  This way, we
could also get rid of the default tag for the @code{file} widget.

@item
The @code{choice} tag should be prettier, something like the abbreviated
menus in Open Look.

@item
The functions used in many widgets, like
@code{widget-item-convert-widget}, should not have names that are
specific to the first widget where I used them.

@item 
Unchecked items in a @code{radio} or @code{checklist} should be grayed
out, and the subwidgets should somehow become inactive.  This could
perhaps be implemented by binding @code{widget-inactive} to t when inserting
the grayed out subwidget, and let the widget-specify functions check
that variable.

@end itemize

@contents
@bye
